# timeflux example dual-input with ZeroMQ (Publishing and Subscribing)
# PM running instructions: 
#   run from: cd C:\Users\habetsj\Research\projects\aDBS_C04\code\pyaDBS_ReTuneC04
#   cmd: timeflux -d graphs/example/hellodummy_ZeroMQ.yml
# view at: http://localhost:8000/monitor/
# TODO: solve FFT problem with x.real() with imported value in wrong float type
# TODO: apply LSL in dummy workflow

graphs:

  # The publish/subscribe broker graph
  - id: Broker
    nodes:
    # Allow communication between graphs
    - id: broker
      module: timeflux.nodes.zmq
      class: Broker
  

  # The main processing graph
  - id: TMSiPublisher
    nodes:
    # GET DATA NODES
    # # Receive ephys signal from Newronika sampler
    # - id: Newronika
    #   module: nodes.newronika.nwkstation
    #   class: interface
    #   params:
    #     name: signal
    # - id: stn_import  # Import dummy ephys signal
    #   module: nodes.dummy.dummy_ephys
    #   class: Dummydata
    #   params:
    #     winlen: 512
    #     datasource: stn
    # - id: ecog_import  # Import dummy ephys signal
    #   module: nodes.dummy.dummy_ephys
    #   class: Dummydata
    #   params:
    #     winlen: 512
    #     datasource: ecog
    - id: tmsi_sampler
      module: nodes.TMSi.tmsi_sampler
      class: Tmsisampler
      params:
        _QUEUE_SIZE: 2000
      
    # SIGNAL PROCESSING NODES
    - id: Welch_stn
      module: timeflux_dsp.nodes.spectral
      class: Welch
      params:
        rate: 2048
        nperseg: 256
    # - id: Welch_ecog
    #   module: timeflux_dsp.nodes.spectral
    #   class: Welch
    #   params:
    #     rate: 2048
    #     nperseg: 256
    - id: Bands_stn
      module: timeflux_dsp.nodes.spectral
      class: Bands
      params:
        relative: True
    # - id: Bands_ecog
    #   module: timeflux_dsp.nodes.spectral
    #   class: Bands
    #   params:
    #     relative: True
    # - id: Coherence
    #   module: nodes.analysis.coherence
    #   class: Coherence
    #   params:
    #     metric: 'abs_icoh'  # squared_coh, icoh, coh, abs_icoh
    #     fs: 2048
    #     nperseg: 512
    #     f_band_min: 14
    #     f_band_max: 20
    # aDBS DECISION MAKING NODES
    - id: compare_stn
      module: nodes.aDBS.compare_input
      class: Compareinput
      params:
        input_signal: stn_beta
    # - id: compare_coh
    #   module: nodes.aDBS.compare_input
    #   class: Compareinput
    #   params:
    #     input_signal: beta_coherence
    # INTER GRAPH COMM. PUBLISHING NODES
    - id: Pub_raw_stn
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: raw_stn
    # - id: Pub_raw_ecog
    #   module: timeflux.nodes.zmq
    #   class: Pub
    #   params:
    #     topic: raw_ecog
    - id: Pub_stn_bands
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: bands_stn
    # - id: Pub_ecog_bands
    #   module: timeflux.nodes.zmq
    #   class: Pub
    #   params:
    #     topic: bands_ecog
    - id: Pub_stn_output
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: stn_output
    # - id: Pub_coh
    #   module: timeflux.nodes.zmq
    #   class: Pub
    #   params:
    #     topic: beta_coh  # coherence in and out
    edges:  # Connect nodes WITHIN graph
      # Communicate imported Data
      - source: tmsi_sampler
        target: Pub_raw_stn
      # - source: ecog_import
      #   target: Pub_raw_ecog
      # Process import signals for beta-power
      - source: tmsi_sampler
        target: Welch_stn
      - source: Welch_stn
        target: Bands_stn
      # - source: ecog_import
      #   target: Welch_ecog
      # - source: Welch_ecog
      #   target: Bands_ecog
      # use STN-beta-power as aDBS input
      - source: Bands_stn:beta
        target: compare_stn
      - source: compare_stn
        target: Pub_stn_output
      # use beta-STN-ECoG-Coherence as aDBS input
      # - source: stn_import
      #   target: Coherence:sig1  # Node Class automatically converts this into i_sig1
      # - source: ecog_import
      #   target: Coherence:sig2
      # - source: Coherence
      #   target: compare_coh
      # - source: compare_coh
      #   target: Pub_coh
      

      - source: Bands_stn:beta  # TODO: CHECK Bands class for band selection func
        target: Pub_stn_bands
      # - source: Bands_ecog:beta
      #   target: Pub_ecog_bands
      
    rate: 0  # Run this graph 4 times per second

  - id: Subscriber
    nodes:
    - id: sub_raw
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: raw_stn   #[raw_stn, raw_ecog]
    - id: sub_bands
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: bands_stn  # [bands_stn, bands_ecog]
    - id: sub_output
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: stn_output
    # - id: sub_coh
    #   module: timeflux.nodes.zmq
    #   class: Sub
    #   params:
    #     topics: beta_coh
    - id: monitor
      module: timeflux_ui.nodes.ui
      class: UI
    edges:
      - source: sub_raw:raw_stn
        target: monitor:raw_stn
      # - source: sub_raw:raw_ecog
      #   target: monitor:raw_ecog
      - source: sub_bands:bands_stn
        target: monitor:bands_stn
      # - source: sub_bands:bands_ecog
      #   target: monitor:bands_ecog
      - source: sub_output:stn_output
        target: monitor:stn_output
      # - source: sub_coh:beta_coh
      #   target: monitor:beta_coh
    rate: 1
