# timeflux example using LSL as central data hub without connected neuroomega
# run as: timeflux -d -e TIMEFLUX_HOOK_PRE=aDBS_init graphs/aDBS/test_without_neuroomega.yml
# view at: http://localhost:8000/monitor/

graphs:

  # Signal processing graph: Fetches samples and computes biomarkers
  - id: SignalProcessing
    # NODES ------------------------------
    nodes:
    # Input node: Fetches samples from tmsi device
    - id: TmsiSampler
      module: nodes.TMSi.tmsi_sampler
      class: Tmsisampler
      params:
        config_path: "adbs_stimdur"
    # Epoch node: Epoch raw data in junks of the same length
    - id: EpochRaw
      module: nodes.data_flow.epoch
      class: Epoch
      params:
        config_path: "adbs_stimdur"
        config_field: "epoch_raw"
    # Signal processing node: Compute biomarker
    - id: Power
      module: nodes.analysis.power
      class: Power
      params:
        config_path: "adbs_stimdur"
    # Epoch node: Create junks of power estimates
    - id: EpochPower
      module: nodes.data_flow.epoch
      class: Epoch
      params:
        config_path: "adbs_stimdur"
        config_field: "epoch_power"
    # Mean node: Average over junks of power estimates
    - id: Mean
      module: nodes.analysis.mean
      class: Mean
      params:
        config_path: "adbs_stimdur"
        config_field: "mean"
    # Output nodes: LSL node sending data to LSL stream
    - id: LSL_Saga
      module: nodes.data_flow.lsl
      class: Send
      params:
        name: Saga
    - id: LSL_Power
      module: nodes.data_flow.lsl
      class: Send
      params:
        name: Power
    # EDGES ------------------------------   
    edges: 
      - source: TmsiSampler:selection
        target: EpochRaw
      - source: EpochRaw
        target: Power
      - source: Power
        target: EpochPower
      - source: EpochPower
        target: Mean
      - source: TmsiSampler:all
        target: LSL_Saga
      - source: Mean
        target: LSL_Power
    rate: 0  # Run this graph x times per second

  # Stimulation graph: Receives biomarker and controls stimulation
  - id: Stimulation
  # NODES ------------------------------
    nodes:
    # Input nodes: Receive data from LSL stream
    - id: LSL_Power
      module: nodes.data_flow.lsl
      class: Receive
      params:
        prop: name
        value: Power
        max_samples: 1
    - id: LSL_StimSwitch
      module: nodes.data_flow.lsl
      class: Receive
      params:
        prop: name
        value: StimSwitch
        max_samples: 1
        timeout: 0.01
    # Control node: Check biomarker and adjust stimulation parameters
    - id: SingleThreshold
      module: nodes.aDBS.single_threshold
      class: Single_threshold
      params:
        config_path: "adbs_stimdur"
    # Stimulator node: Controls stim params on neuroomega
    - id: Stimulator
      module: nodes.AO.AO_stim_matlab
      class: AO_stim
      params:
        config_path: "adbs_stimdur"
     # Output nodes: LSL node sending data to LSL stream
    - id: LSL_StimParams
      module: nodes.data_flow.lsl
      class: Send
      params:
        name: StimParams
    # EDGES ------------------------------   
    edges: 
      - source: LSL_StimSwitch
        target: SingleThreshold:StimSwitch
      - source: LSL_Power
        target: SingleThreshold:Biomarker
      - source: SingleThreshold
        target: Stimulator
      - source: Stimulator
        target: LSL_StimParams
    rate: 0  # Run this graph x times per second

  # Monitor graph: Receives data from broker and visualizes it
  - id: Monitor
    nodes:
    # NODES ------------------------------
    # Input nodes: Receive data from LSL stream
    - id: LSL_Saga
      module: nodes.data_flow.lsl
      class: Receive
      params:
        prop: name
        value: Saga
    - id: LSL_Power
      module: nodes.data_flow.lsl
      class: Receive
      params:
        prop: name
        value: Power
    - id: LSL_StimParams
      module: nodes.data_flow.lsl
      class: Receive
      params:
        prop: name
        value: StimParams
    # Synchronizer node: Adds clock time to stream timestamps
    - id: Synchronizer
      module: nodes.data_flow.sync
      class: Synchronizer
    # UI node: Receives data from subscribers and plots them
    - id: UI
      module: timeflux_ui.nodes.ui
      class: UI
    # Output node: LSL node sending data to LSL stream
    - id: LSL_StimSwitch
      module: nodes.data_flow.lsl
      class: Send
      params:
        name: StimSwitch
        channel_format: string
        labels: switch
    # EDGES ------------------------------   
    edges:
      - source: LSL_Saga
        target: Synchronizer:Saga
      - source: LSL_Power
        target: Synchronizer:Power
      - source: LSL_StimParams
        target: Synchronizer:StimParams
      - source: Synchronizer:Saga
        target: UI:Saga
      - source: Synchronizer:Power
        target: UI:Power
      - source: Synchronizer:StimParams
        target: UI:StimParams
      - source: UI:events
        target: LSL_StimSwitch
    rate: 5

  